/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/InfoSum/delInfoSum': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 删除信息整合信息
     * @description 删除信息整合信息
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 删除信息整合信息请求参数 */
      requestBody: {
        content: {
          'application/json': components['schemas']['infoSum.DelInfoSumRequest'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/InfoSum/getInfoSums': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取信息整合列表
     * @description 获取所有信息整合的列表
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            '*/*': components['schemas']['ginx.Result'] & {
              data?: components['schemas']['infoSum.GetInfoSumsResponse'];
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/InfoSum/saveInfoSum': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 保存信息整合信息
     * @description 保存信息整合信息,id是可选字段,如果有就是替换原来的列表里的,如果没有就是存储新的值
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 保存信息整合信息请求参数 */
      requestBody: {
        content: {
          'application/json': components['schemas']['infoSum.SaveInfoSumRequest'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/banner/delBanner': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 删除 banner 内容
     * @description 删除 banner 内容
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 删除 banner 内容请求参数 */
      requestBody: {
        content: {
          'application/json': components['schemas']['banner.DelBannerRequest'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/banner/getBanners': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取 banner 列表
     * @description 获取 banner 列表
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            '*/*': components['schemas']['ginx.Result'] & {
              data?: components['schemas']['banner.GetBannersResponse'];
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/banner/saveBanner': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 保存 banner 内容
     * @description 保存 banner 内容,如果不添加id字段表示添加一个新的banner
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 保存 banner 内容请求参数 */
      requestBody: {
        content: {
          'application/json': components['schemas']['banner.SaveBannerRequest'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/calendar/delCalendar': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 删除日历内容
     * @description 删除日历内容
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 删除日历内容请求参数 */
      requestBody: {
        content: {
          'application/json': components['schemas']['calendar.DelCalendarRequest'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/calendar/getCalendar': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取日历列表
     * @description 获取日历列表
     */
    get: {
      parameters: {
        query: {
          /** @description 年份 */
          year: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'] & {
              data?: components['schemas']['calendar.GetCalendarResponse'];
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/calendar/saveCalendar': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 保存日历内容
     * @description 保存日历内容
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 保存日历内容请求参数 */
      requestBody: {
        content: {
          'application/json': components['schemas']['calendar.SaveCalendarRequest'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/card/getRecords': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 获取消费记录
     * @description 获取用户消费记录，student_id,start_time,type 必须存在  type 分为 "card"（实体卡） 与 "virtual"（虚拟卡）
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 记录问题解决情况 */
      requestBody: {
        content: {
          'application/json': components['schemas']['card.GetRecordOfConsumptionRequest'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['card.GetRecordOfConsumptionResponse'];
          };
        };
        /** @description 创建失败 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['card.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/card/noteUserKey': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 记录用户的key
     * @description 记录用户的key
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 记录问题解决情况 */
      requestBody: {
        content: {
          'application/json': components['schemas']['card.NoteUserKeyRequest'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['card.Result'];
          };
        };
        /** @description 创建失败 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['card.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/card/updateUserKey': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 更新用户的key
     * @description 更新用户的key
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 记录问题解决情况 */
      requestBody: {
        content: {
          'application/json': components['schemas']['card.UpdateUserKeyRequest'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['card.Result'];
          };
        };
        /** @description 创建失败 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['card.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/class/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 添加课表
     * @description 添加新的课表
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description Bearer Token */
          Authorization: string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description 课表信息 */
      requestBody: {
        content: {
          'application/json': components['schemas']['class.AddClassRequest'];
        };
      };
      responses: {
        /** @description 成功添加课表 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/class/delete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除课表
     * @description 根据课表ID删除课表
     */
    delete: {
      parameters: {
        query?: never;
        header: {
          /** @description Bearer Token */
          Authorization: string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description 删除课表请求 */
      requestBody: {
        content: {
          'application/json': components['schemas']['class.DeleteClassRequest'];
        };
      };
      responses: {
        /** @description 成功删除课表 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/class/get': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取课表
     * @description 根据学期、学年等条件获取课表
     */
    get: {
      parameters: {
        query: {
          /** @description 学年 */
          year: string;
          /** @description 学期 */
          semester: string;
          /** @description 当前周 */
          week: number;
        };
        header: {
          /** @description Bearer Token */
          Authorization: string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description 获取课表请求参数 */
      requestBody: {
        content: {
          '*/*': components['schemas']['class.GetClassListRequest'];
        };
      };
      responses: {
        /** @description 成功返回课表 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/class/getRecycle': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取回收站课表信息
     * @description 获取已删除但未彻底清除的课表信息
     */
    get: {
      parameters: {
        query: {
          /** @description 学年 */
          year: string;
          /** @description 学期 */
          semester: string;
        };
        header: {
          /** @description Bearer Token */
          Authorization: string;
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功获取回收站课表信息 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/class/recover': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 恢复课表
     * @description 从回收站恢复课表
     */
    put: {
      parameters: {
        query?: never;
        header: {
          /** @description Bearer Token */
          Authorization: string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description 恢复课表请求 */
      requestBody: {
        content: {
          'application/json': components['schemas']['class.RecoverClassRequest'];
        };
      };
      responses: {
        /** @description 成功恢复课表 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/class/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 搜索课程
     * @description 根据关键词搜索课程
     */
    get: {
      parameters: {
        query: {
          /** @description 学年 */
          year: string;
          /** @description 学期 */
          semester: string;
          /** @description 搜索关键词 */
          searchKeyWords: string;
        };
        header: {
          /** @description Bearer Token */
          Authorization: string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description 搜索课程请求 */
      requestBody: {
        content: {
          '*/*': components['schemas']['class.SearchRequest'];
        };
      };
      responses: {
        /** @description 成功搜索到课程 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/class/update': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 更新课表信息
     * @description 根据课表ID更新课表信息
     */
    put: {
      parameters: {
        query?: never;
        header: {
          /** @description Bearer Token */
          Authorization: string;
        };
        path?: never;
        cookie?: never;
      };
      /** @description 更新课表请求 */
      requestBody: {
        content: {
          'application/json': components['schemas']['class.UpdateClassRequest'];
        };
      };
      responses: {
        /** @description 成功更新课表 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/department/delDepartment': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 删除部门信息
     * @description 删除部门信息
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 删除部门信息请求参数 */
      requestBody: {
        content: {
          'application/json': components['schemas']['department.DelDepartmentRequest'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/department/getDepartments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取部门列表
     * @description 获取部门列表
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            '*/*': components['schemas']['ginx.Result'] & {
              data?: components['schemas']['department.GetDepartmentsResponse'];
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/department/saveDepartment': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 保存部门信息
     * @description 保存部门信息
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 保存部门信息请求参数 */
      requestBody: {
        content: {
          'application/json': components['schemas']['department.SaveDepartmentRequest'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/elecprice/check': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询电费
     * @description 根据学号、区域、楼栋和房间号查询电费
     */
    get: {
      parameters: {
        query: {
          /** @description 区域 */
          area: string;
          /** @description 楼栋 */
          building: string;
          /** @description 房间 */
          room: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功返回电费信息 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/elecprice/set': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 设置电费
     * @description 根据学号、区域、楼栋和房间号设置电费金额
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 设置电费请求参数 */
      requestBody: {
        content: {
          'application/json': components['schemas']['elecprice.SetRequest'];
        };
      };
      responses: {
        /** @description 成功设置电费 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/feed/changeFeedAllowList': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 修改feed订阅白名单
     * @description 修改已登录用户的feed订阅白名单设置
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 白名单设置 */
      requestBody: {
        content: {
          'application/json': components['schemas']['feed.ChangeFeedAllowListReq'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
        /** @description 系统异常 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/feed/clearFeedEvent': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 清除feed订阅事件
     * @description 清除指定用户的feed订阅事件,feedid有三种状态0表示全部清除(不加参数默认为0),-1表示清除已读,指定feedid表示只清除这个id的feed消息
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description feed订阅事件ID */
      requestBody: {
        content: {
          'application/json': components['schemas']['feed.ClearFeedEventReq'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
        /** @description 系统异常 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/feed/getFailMSG': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取失败的消息
     * @description 获取已登录用户的失败消息
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
        /** @description 系统异常 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/feed/getFeedAllowList': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取feed订阅白名单
     * @description 获取已登录用户的feed订阅白名单设置
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
        /** @description 系统异常 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/feed/getFeedEvents': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取feed订阅事件
     * @description 获取已登录用户的所有feed订阅事件（包括已读和未读）
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['feed.GetFeedEventsResp'];
          };
        };
        /** @description 系统异常 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/feed/getToBePublicOfficialMSG': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取待发布的官方消息
     * @description 获取计划发布的官方消息，仅限管理员操作
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['feed.GetToBePublicMuxiOfficialMSGResp'];
          };
        };
        /** @description 没有访问权限 */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
        /** @description 系统异常 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/feed/publicMuxiOfficialMSG': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 发布木犀官方消息
     * @description 发布木犀官方消息，仅限管理员操作
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 木犀官方消息 */
      requestBody: {
        content: {
          'application/json': components['schemas']['feed.PublicMuxiOfficialMSGReq'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['feed.PublicMuxiOfficialMSGResp'];
          };
        };
        /** @description 没有访问权限 */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
        /** @description 系统异常 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/feed/readFeedEvent': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 标注feed订阅事件为已读
     * @description 标注feed订阅事件为已读
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description feed订阅事件ID */
      requestBody: {
        content: {
          'application/json': components['schemas']['feed.ReadFeedEventReq'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
        /** @description 系统异常 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/feed/removeFeedToken': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 删除feed订阅Token
     * @description 删除已登录用户的feed订阅Token
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description feed订阅Token */
      requestBody: {
        content: {
          'application/json': components['schemas']['feed.RemoveFeedTokenReq'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
        /** @description 系统异常 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/feed/saveFeedToken': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 保存feed订阅Token
     * @description 保存已登录用户的feed订阅Token
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description feed订阅Token */
      requestBody: {
        content: {
          'application/json': components['schemas']['feed.SaveFeedTokenReq'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
        /** @description 系统异常 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/feed/stopMuxiOfficialMSG': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 停止木犀官方消息
     * @description 停止木犀官方消息，仅限管理员操作
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 停止消息请求 */
      requestBody: {
        content: {
          'application/json': components['schemas']['feed.StopMuxiOfficialMSGReq'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
        /** @description 没有访问权限 */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
        /** @description 系统异常 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/feedback_help/changeQuestion': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 修改一个问题与答复
     * @description 修改一个常见问题的内容与答复
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 修改常见问题 */
      requestBody: {
        content: {
          'application/json': components['schemas']['feedback_help.ChangeQuestionReq'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['feedback_help.Result'];
          };
        };
        /** @description 系统异常 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['feedback_help.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/feedback_help/createQuestion': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 创建一个问题与答复
     * @description 创建一个常见问题的内容与答复
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 创建一个常见问题 */
      requestBody: {
        content: {
          'application/json': components['schemas']['feedback_help.CreateQuestionReq'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['feedback_help.Result'];
          };
        };
        /** @description 系统异常 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['feedback_help.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/feedback_help/deleteQuestion': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 删除一个问题与答复
     * @description 删除一个常见问题的内容与答复
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 删除常见问题 */
      requestBody: {
        content: {
          'application/json': components['schemas']['feedback_help.DeleteQuestionReq'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['feedback_help.Result'];
          };
        };
        /** @description 系统异常 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['feedback_help.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/feedback_help/findQuestionsByName': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 搜取问题
     * @description 对常见问题进行模糊搜索
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 订阅事件ID */
      requestBody: {
        content: {
          'application/json': components['schemas']['feedback_help.FindQuestionsByNameReq'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['feedback_help.FindQuestionsByNameResp'];
          };
        };
        /** @description 系统异常 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['feedback_help.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/feedback_help/getQuestion': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取常见问题
     * @description 获取点击数量最多的10个常见问题
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['feedback_help.GetQuestionsResp'];
          };
        };
        /** @description 系统异常 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['feedback_help.Result'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/feedback_help/noteEventTracking': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 埋点
     * @description 记录埋点 , 埋点类型
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 埋点 */
      requestBody: {
        content: {
          'application/json': components['schemas']['feedback_help.NoteEventTrackingReq'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['feedback_help.Result'];
          };
        };
        /** @description 系统异常 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['feedback_help.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/feedback_help/noteMoreFeedbackSearchSkip': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 跳转埋点
     * @description 记录问题跳转埋点
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 问题跳转埋点 */
      requestBody: {
        content: {
          'application/json': components['schemas']['feedback_help.NoteMoreFeedbackSearchSkipReq'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['feedback_help.Result'];
          };
        };
        /** @description 系统异常 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['feedback_help.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/feedback_help/noteQuestion': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 记录问题解决情况
     * @description 记录问题解决情况
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 记录问题解决情况 */
      requestBody: {
        content: {
          'application/json': components['schemas']['feedback_help.NoteQuestionReq'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['feedback_help.Result'];
          };
        };
        /** @description 系统异常 */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['feedback_help.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/grade/grade_all': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询成绩
     * @description 获取用户的所有年份的所有成绩
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功返回成绩信息 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/grade/grade_detail': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询详细成绩
     * @description 根据课程编号，学年号，学期号查询成绩
     */
    get: {
      parameters: {
        query: {
          /** @description 教学班id */
          jxbId: string;
          /** @description 学期 */
          xqm: string;
          /** @description 学年 */
          xnm: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功返回成绩信息 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/statics': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取静态资源[精确名称]
     * @description 根据静态资源名称获取静态资源的内容。
     */
    get: {
      parameters: {
        query: {
          /** @description 静态资源名称 */
          static_name: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'] & {
              data?: components['schemas']['static.StaticVo'];
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/statics/match/labels': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取静态资源[标签匹配]
     * @description 根据静labels匹配合适的静态资源
     */
    get: {
      parameters: {
        query: {
          /** @description 标签：标明匹配哪一类的资源 */
          'labels[type]': string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'] & {
              data?: components['schemas']['static.GetStaticByLabelsResp'];
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/statics/save': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 保存静态内容
     * @description 保存静态内容
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 保存静态内容请求参数 */
      requestBody: {
        content: {
          'application/json': components['schemas']['static.SaveStaticReq'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/statics/save_file': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 保存静态内容[文件][废弃]
     * @description 通过上传文件保存静态内容，目前仅支持.html文件
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'multipart/form-data': {
            /** @description 静态名称 */
            name: string;
            /**
             * Format: binary
             * @description 静态内容文件
             */
            content: string;
          };
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tube/access_token': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 获取图床访问令牌 */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'] & {
              data?: components['schemas']['tube.GetTubeTokenData'];
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users/login_ccnu': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * ccnu登录
     * @description 通过学号和密码进行登录认证
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 登录请求体 */
      requestBody: {
        content: {
          'application/json': components['schemas']['user.LoginByCCNUReq'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 登出(销毁token)
     * @description 通过短token登出
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users/refresh_token': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 刷新短token
     * @description 通过长token刷新短token
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/website/delWebsite': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 删除网站信息
     * @description 删除网站信息
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 删除网站信息请求参数 */
      requestBody: {
        content: {
          'application/json': components['schemas']['website.DelWebsiteRequest'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/website/getWebsites': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取网站列表
     * @description 获取所有网站的列表
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            '*/*': components['schemas']['ginx.Result'] & {
              data?: components['schemas']['website.GetWebsitesResponse'];
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/website/saveWebsite': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 保存网站信息
     * @description 保存网站信息,id是可选字段,如果有就是替换原来的列表里的,如果没有就是存储新的值
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description 保存网站信息请求参数 */
      requestBody: {
        content: {
          'application/json': components['schemas']['website.SaveWebsiteRequest'];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ginx.Result'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    'banner.Banner': {
      id?: number;
      picture_link?: string;
      web_link?: string;
    };
    'banner.DelBannerRequest': {
      id?: number;
    };
    'banner.GetBannersResponse': {
      banners?: components['schemas']['banner.Banner'][];
    };
    'banner.SaveBannerRequest': {
      id?: number;
      picture_link?: string;
      web_link?: string;
    };
    'calendar.DelCalendarRequest': {
      year?: number;
    };
    'calendar.GetCalendarResponse': {
      link?: string;
      year?: number;
    };
    'calendar.SaveCalendarRequest': {
      link?: string;
      year?: number;
    };
    'card.GetRecordOfConsumptionRequest': {
      key?: string;
      start_time?: string;
      type?: string;
    };
    'card.GetRecordOfConsumptionResponse': {
      records?: components['schemas']['card.Records'][];
    };
    'card.NoteUserKeyRequest': {
      key?: string;
    };
    'card.Records': {
      SMT_DEALDATETIME?: string;
      SMT_DEALNAME?: string;
      SMT_ORG_NAME?: string;
      SMT_TIMES?: number;
      after_money?: number;
      money?: number;
    };
    'card.Result': {
      /** @description 错误码，非 0 表示失败 */
      code?: number;
      data?: Record<string, never>;
      /** @description 错误或成功 描述 */
      msg?: string;
    };
    'card.UpdateUserKeyRequest': {
      key?: string;
    };
    'class.AddClassRequest': {
      /** @description 学分 */
      credit?: number;
      /** @description 星期几 */
      day?: number;
      /** @description 第几节 '形如 "1-3","1-1"' */
      dur_class?: string;
      /** @description 课程名称 */
      name?: string;
      /** @description 学期 */
      semester?: string;
      /** @description 教师 */
      teacher?: string;
      /** @description 哪些周 */
      weeks?: number;
      /** @description 地点 */
      where?: string;
      /** @description 学年 */
      year?: string;
    };
    'class.DeleteClassRequest': {
      /** @description 要被删的课程id */
      id?: string;
      /** @description 学期 "1"代表第一学期，"2"代表第二学期，"3"代表第三学期 */
      semester?: string;
      /** @description 学年  "2024" -> 代表"2024-2025学年" */
      year?: string;
    };
    'class.GetClassListRequest': {
      semester?: string;
      week?: number;
      year?: string;
    };
    'class.RecoverClassRequest': {
      /** @description 课程的ID（唯一标识） 更新后这个可能会换，所以响应的时候会把新的ID返回 */
      classId?: string;
      /** @description 学期 "1"代表第一学期，"2"代表第二学期，"3"代表第三学期 */
      semester?: string;
      /** @description 学年  "2024" 代表"2024-2025学年" */
      year?: string;
    };
    'class.SearchRequest': {
      /** @description 搜索关键词,匹配的是课程名称和教师姓名 */
      searchKeyWords?: string;
      semester?: string;
      year?: string;
    };
    'class.UpdateClassRequest': {
      /** @description 课程的ID（唯一标识） 更新后这个可能会换，所以响应的时候会把新的ID返回 */
      classId?: string;
      /** @description 学分 */
      credit?: number;
      /** @description 星期几 */
      day?: number;
      /** @description 第几节 '形如 "1-3","1-1"' */
      dur_class?: string;
      /** @description 课程名称 */
      name?: string;
      /** @description 学期 */
      semester?: string;
      /** @description 教师 */
      teacher?: string;
      /** @description 哪些周 */
      weeks?: number;
      /** @description 地点 */
      where?: string;
      /** @description 学年 */
      year?: string;
    };
    'department.DelDepartmentRequest': {
      id?: number;
    };
    'department.Department': {
      id?: number;
      name?: string;
      phone?: string;
      place?: string;
      time?: string;
    };
    'department.GetDepartmentsResponse': {
      departments?: components['schemas']['department.Department'][];
    };
    'department.SaveDepartmentRequest': {
      id?: number;
      name?: string;
      phone?: string;
      place?: string;
      time?: string;
    };
    'elecprice.SetRequest': {
      /** @description 区域 */
      area?: string;
      /** @description 建筑 */
      building?: string;
      /** @description 金额 */
      money?: number;
      /** @description 房间号 */
      room?: string;
    };
    'feed.ChangeFeedAllowListReq': {
      air_conditioner?: boolean;
      grade?: boolean;
      holiday?: boolean;
      light?: boolean;
      muxi?: boolean;
    };
    'feed.ClearFeedEventReq': {
      feed_id?: number;
    };
    'feed.FeedEvent': {
      content?: string;
      created_at?: number;
      extend_fields?: {
        [key: string]: string;
      };
      id?: number;
      title?: string;
      type?: string;
    };
    'feed.GetFeedEventsResp': {
      read_events?: components['schemas']['feed.FeedEvent'][];
      unread_events?: components['schemas']['feed.FeedEvent'][];
    };
    'feed.GetToBePublicMuxiOfficialMSGResp': {
      msg_list?: components['schemas']['feed.MuxiOfficialMSG'][];
    };
    'feed.MuxiOfficialMSG': {
      content?: string;
      extend_fields?: {
        [key: string]: string;
      };
      id?: string;
      public_time?: string;
      title?: string;
    };
    'feed.PublicMuxiOfficialMSGReq': {
      content?: string;
      extend_fields?: {
        [key: string]: string;
      };
      later_time?: number;
      title?: string;
    };
    'feed.PublicMuxiOfficialMSGResp': {
      content?: string;
      extend_fields?: {
        [key: string]: string;
      };
      id?: string;
      public_time?: string;
      title?: string;
    };
    'feed.ReadFeedEventReq': {
      feed_id?: number;
    };
    'feed.RemoveFeedTokenReq': {
      token?: string;
    };
    'feed.SaveFeedTokenReq': {
      token?: string;
    };
    'feed.StopMuxiOfficialMSGReq': {
      id?: string;
    };
    'feedback_help.ChangeQuestionReq': {
      answer?: string;
      question?: string;
      question_id?: number;
    };
    'feedback_help.CreateQuestionReq': {
      answer?: string;
      question?: string;
    };
    'feedback_help.DeleteQuestionReq': {
      question_id?: number;
    };
    'feedback_help.FindQuestionsByNameReq': {
      question?: string;
    };
    'feedback_help.FindQuestionsByNameResp': {
      questions?: components['schemas']['feedback_help.FrequentlyAskedQuestion'][];
    };
    'feedback_help.FrequentlyAskedQuestion': {
      answer?: string;
      /** @description Utime      time.Time
       *     Ctime      time.Time */
      clickTimes?: number;
      id?: number;
      question?: string;
    };
    'feedback_help.GetQuestionsResp': {
      questions?: components['schemas']['feedback_help.FrequentlyAskedQuestion'][];
    };
    'feedback_help.NoteEventTrackingReq': {
      event?: number;
    };
    'feedback_help.NoteMoreFeedbackSearchSkipReq': {
      question_id?: number;
    };
    'feedback_help.NoteQuestionReq': {
      if_over?: boolean;
      question_id?: number;
    };
    'feedback_help.Result': {
      /** @description 错误码，非 0 表示失败 */
      code?: number;
      data?: Record<string, never>;
      /** @description 错误或成功 描述 */
      msg?: string;
    };
    'ginx.Result': {
      /** @description 错误码，非 0 表示失败 */
      code?: number;
      data?: Record<string, never>;
      /** @description 错误或成功 描述 */
      msg?: string;
    };
    'infoSum.DelInfoSumRequest': {
      id?: number;
    };
    'infoSum.GetInfoSumsResponse': {
      info_sums?: components['schemas']['infoSum.InfoSum'][];
    };
    'infoSum.InfoSum': {
      description?: string;
      id?: number;
      image?: string;
      link?: string;
      name?: string;
    };
    'infoSum.SaveInfoSumRequest': {
      description?: string;
      id?: number;
      image?: string;
      link?: string;
      name?: string;
    };
    'static.GetStaticByLabelsResp': {
      statics?: components['schemas']['static.StaticVo'][];
    };
    'static.SaveStaticReq': {
      content?: string;
      labels?: {
        [key: string]: string;
      };
      name?: string;
    };
    'static.StaticVo': {
      content?: string;
      labels?: {
        [key: string]: string;
      };
      name?: string;
    };
    'tube.GetTubeTokenData': {
      access_token?: string;
      domain_name?: string;
    };
    'user.LoginByCCNUReq': {
      /** @description 密码 */
      password?: string;
      student_id?: string;
    };
    'website.DelWebsiteRequest': {
      id?: number;
    };
    'website.GetWebsitesResponse': {
      websites?: components['schemas']['website.Website'][];
    };
    'website.SaveWebsiteRequest': {
      description?: string;
      id?: number;
      image?: string;
      link?: string;
      name?: string;
    };
    'website.Website': {
      description?: string;
      id?: number;
      image?: string;
      link?: string;
      name?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;
export type operations = Record<string, never>;
